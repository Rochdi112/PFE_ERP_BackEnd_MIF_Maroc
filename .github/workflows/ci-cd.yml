name: CI/CD Production Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  lint-and-security:
    name: üîç Lint & Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install ruff bandit safety mypy
        
    - name: Run Ruff linter
      run: |
        ruff check . --output-format=github
        
    - name: Run Black formatter check
      run: |
        black --check --diff .
        
    - name: Run isort import check
      run: |
        isort --check-only --diff .
        
    - name: Run Bandit security linter
      run: |
        bandit -r app/ -f json -o bandit-report.json || true
        bandit -r app/ -f txt
        
    - name: Run Safety dependency check
      run: |
        safety check --json --output safety-report.json || true
        safety check
        
    - name: Run MyPy type checking
      run: |
        mypy app/ --ignore-missing-imports --no-strict-optional || true
        
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  test:
    name: üß™ Tests & Coverage
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Set up test environment
      run: |
        export DATABASE_URL="postgresql://test_user:test_password@localhost:5432/test_db"
        export SECRET_KEY="test-secret-key-for-ci"
        export FILES_ENC_KEY="test-fernet-key-32-bytes-exactly"
        
    - name: Run database migrations
      run: |
        export DATABASE_URL="postgresql://test_user:test_password@localhost:5432/test_db"
        alembic upgrade head
        
    - name: Run tests with coverage
      run: |
        export DATABASE_URL="postgresql://test_user:test_password@localhost:5432/test_db"
        export SECRET_KEY="test-secret-key-for-ci"
        export FILES_ENC_KEY="test-fernet-key-32-bytes-exactly"
        pytest --cov=app --cov-report=xml --cov-report=html --cov-report=term-missing
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: true
        
    - name: Upload coverage reports
      uses: actions/upload-artifact@v3
      with:
        name: coverage-reports
        path: |
          coverage.xml
          htmlcov/

  build-and-scan:
    name: üê≥ Build & Scan Docker Image
    runs-on: ubuntu-latest
    needs: [lint-and-security, test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.prod
        push: false
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        outputs: type=docker,dest=/tmp/image.tar
        
    - name: Load image for scanning
      run: |
        docker load --input /tmp/image.tar
        
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
        
    - name: Run Trivy for critical vulnerabilities
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        format: 'table'
        severity: 'CRITICAL,HIGH'
        exit-code: '1'
        
    - name: Push image to registry
      if: github.event_name != 'pull_request'
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.prod
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-staging:
    name: üöÄ Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-and-scan]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: staging
    
    steps:
    - name: Deploy to staging
      run: |
        echo "üöÄ Deploying to staging environment..."
        echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}"
        # Ici, vous int√©greriez avec votre plateforme de d√©ploiement
        # Exemples: kubectl, helm, docker-compose, etc.
        
    - name: Run smoke tests
      run: |
        echo "üß™ Running smoke tests on staging..."
        # Ici, vous ex√©cuteriez des tests de sanit√© sur staging
        
  deploy-production:
    name: üè≠ Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-and-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
    - name: Deploy to production
      run: |
        echo "üè≠ Deploying to production environment..."
        echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
        # D√©ploiement production avec protection manuelle
        
    - name: Run production health checks
      run: |
        echo "üîç Running production health checks..."
        # Tests de sanit√© post-d√©ploiement
        
  publish-artifacts:
    name: üì¶ Publish Artifacts
    runs-on: ubuntu-latest
    needs: [test, build-and-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Generate OpenAPI specification
      run: |
        python scripts/openapi_export_runtime.py
        
    - name: Upload OpenAPI artifact
      uses: actions/upload-artifact@v3
      with:
        name: openapi-spec
        path: openapi.json
        
    - name: Create Release
      if: startsWith(github.ref, 'refs/tags/')
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false