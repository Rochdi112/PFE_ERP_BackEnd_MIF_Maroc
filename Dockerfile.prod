# Dockerfile.prod - Multi-stage optimized production build

# =============================================================================
# Builder Stage - Dependencies and compilation
# =============================================================================
FROM python:3.11-slim as builder

# Labels pour traçabilité
LABEL maintainer="ERP MIF Maroc Team"
LABEL description="Backend ERP - Builder Stage"

# Variables d'environnement pour optimisation
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1

# Outils système pour compilation
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    gcc \
    g++ \
    postgresql-client \
    && rm -rf /var/lib/apt/lists/*

# Copier les fichiers de configuration des dépendances
WORKDIR /app
COPY requirements.txt ./

# Créer environnement virtuel et installer dépendances
RUN python -m venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Installer les dépendances Python
RUN pip install --upgrade pip && \
    pip install -r requirements.txt && \
    pip install gunicorn[gevent]==21.2.0

# =============================================================================
# Runtime Stage - Image finale optimisée
# =============================================================================
FROM python:3.11-slim as runtime

# Labels OCI pour métadonnées
LABEL org.opencontainers.image.title="ERP MIF Maroc Backend"
LABEL org.opencontainers.image.description="Backend API pour gestion interventions industrielles"
LABEL org.opencontainers.image.version="1.0.0"
LABEL org.opencontainers.image.vendor="MIF Maroc"
LABEL org.opencontainers.image.licenses="MIT"
LABEL org.opencontainers.image.source="https://github.com/Rochdi112/PFE_ERP_BackEnd_MIF_Maroc"

# Variables d'environnement de production
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PATH="/opt/venv/bin:$PATH" \
    ENVIRONMENT=production \
    DEBUG=false

# Créer utilisateur non-root pour sécurité
RUN groupadd -r appuser && useradd -r -g appuser appuser

# Installer dépendances système runtime uniquement
RUN apt-get update && apt-get install -y --no-install-recommends \
    curl \
    ca-certificates \
    postgresql-client \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Copier l'environnement virtuel depuis le builder
COPY --from=builder /opt/venv /opt/venv

# Créer structure de dossiers
WORKDIR /app
RUN mkdir -p logs static/uploads keys \
    && chown -R appuser:appuser /app

# Copier le code source
COPY --chown=appuser:appuser app/ ./app/
COPY --chown=appuser:appuser alembic.ini ./
COPY --chown=appuser:appuser scripts/ ./scripts/
COPY --chown=appuser:appuser templates/ ./templates/

# Copier les fichiers de configuration
COPY --chown=appuser:appuser .env.production.template ./.env.example

# Générer les clés JWT si nécessaire (en production, utiliser des secrets externes)
USER appuser
RUN python scripts/generate_jwt_keys.py || echo "JWT keys generation skipped"

# Healthcheck intégré
HEALTHCHECK --interval=30s --timeout=30s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8000/health || exit 1

# Exposition du port
EXPOSE 8000

# Configuration Gunicorn optimisée pour production
ENV GUNICORN_WORKERS=4 \
    GUNICORN_WORKER_CLASS=gevent \
    GUNICORN_WORKER_CONNECTIONS=1000 \
    GUNICORN_MAX_REQUESTS=1000 \
    GUNICORN_MAX_REQUESTS_JITTER=100 \
    GUNICORN_TIMEOUT=30 \
    GUNICORN_KEEPALIVE=5

# Script d'entrée pour initialisation
COPY --chown=appuser:appuser docker-entrypoint.sh ./
RUN chmod +x docker-entrypoint.sh

# Point d'entrée
ENTRYPOINT ["./docker-entrypoint.sh"]

# Commande par défaut
CMD ["gunicorn", \
     "--bind", "0.0.0.0:8000", \
     "--workers", "4", \
     "--worker-class", "gevent", \
     "--worker-connections", "1000", \
     "--max-requests", "1000", \
     "--max-requests-jitter", "100", \
     "--timeout", "30", \
     "--keep-alive", "5", \
     "--access-logfile", "-", \
     "--error-logfile", "-", \
     "--log-level", "info", \
     "--preload", \
     "app.main:app"]
