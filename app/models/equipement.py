# app/models/equipement.py
"""
Mod√®le Equipement - Gestion du parc mat√©riel.

Ce module g√®re le patrimoine technique de l'ERP :
- Inventaire complet des √©quipements industriels
- Caract√©ristiques techniques et localisation
- Maintenance pr√©ventive et corrective
- Historique des interventions et pannes
- Planification et cycles d'entretien
- Relations avec contrats et clients

Architecture:
- Mod√®le central pour la maintenance industrielle
- Relations optimis√©es avec interventions/planning
- Index de performance sur localisation et type
- Propri√©t√©s calcul√©es pour KPI maintenance
- Interface to_dict() standardis√©e pour API
"""

from sqlalchemy import Column, Integer, String, DateTime, Boolean, Text, Numeric, Index, ForeignKey, Enum
from sqlalchemy.orm import relationship
from datetime import datetime, timedelta
from app.db.database import Base
from typing import TYPE_CHECKING, Optional, Dict, Any, List
import enum

# NOTE: Import conditionnel pour √©viter les imports circulaires
if TYPE_CHECKING:
    from .intervention import Intervention
    from .planning import Planning
    from .client import Client
    from .contrat import Contrat


class StatutEquipement(str, enum.Enum):
    """
    Statuts op√©rationnels des √©quipements.
    
    - operationnel : en service normal
    - maintenance : en cours de maintenance
    - panne : hors service suite √† d√©faillance
    - retire : retir√© du service d√©finitivement
    """
    operationnel = "operationnel"
    maintenance = "maintenance"
    panne = "panne"
    retire = "retire"


class CriticiteEquipement(str, enum.Enum):
    """
    Niveaux de criticit√© m√©tier des √©quipements.
    
    - critique : arr√™t de production si panne
    - important : impact significatif sur production
    - standard : impact mod√©r√©
    - non_critique : impact minimal
    """
    critique = "critique"
    important = "important"
    standard = "standard"
    non_critique = "non_critique"


class Equipement(Base):
    """
    Mod√®le Equipement - Patrimoine technique de l'entreprise.
    
    Gestion compl√®te du parc mat√©riel avec :
    - Identification unique et caract√©ristiques techniques
    - Localisation g√©ographique et responsabilit√©s
    - Statut op√©rationnel et criticit√© m√©tier
    - Cycles de maintenance pr√©ventive
    - Historique des interventions et performances
    - Relations contractuelles et propri√©t√© client
    
    Relations cl√©s :
    - 1:N avec Interventions (historique maintenance)
    - 1:N avec Planning (planification pr√©ventive)
    - N:1 avec Client (propri√©taire/responsable)
    - N:1 avec Contrat (couverture contractuelle)
    
    Performances :
    - Index composites sur type+localisation, statut+criticit√©
    - Relations lazy=dynamic pour collections volumineuses
    - Propri√©t√©s calcul√©es mises en cache applicatif
    """
    __tablename__ = "equipements"
    # Autorise les annotations non-Mapped legacy (compat SQLAlchemy 2.0)
    __allow_unmapped__ = True

    # NOTE: Index composites pour requ√™tes m√©tier fr√©quentes
    __table_args__ = (
        Index('idx_equipement_type_localisation', 'type_equipement', 'localisation'),
        Index('idx_equipement_statut_criticite', 'statut', 'criticite'),
        Index('idx_equipement_client_statut', 'client_id', 'statut'),
        Index('idx_equipement_created_type', 'created_at', 'type_equipement'),
    )

    # Cl√© primaire
    id = Column(Integer, primary_key=True, index=True)

    # Identification et caract√©ristiques
    nom = Column(String(255), nullable=False, index=True)
    numero_serie = Column(String(100), unique=True, nullable=True, index=True)
    code_interne = Column(String(50), unique=True, nullable=True, index=True)
    type_equipement = Column(String(100), nullable=False, index=True)
    marque = Column(String(100), nullable=True)
    modele = Column(String(100), nullable=True)
    
    # Localisation et environnement
    localisation = Column(String(255), nullable=False, index=True)
    batiment = Column(String(100), nullable=True)
    etage = Column(String(20), nullable=True)
    zone = Column(String(100), nullable=True)
    
    # Statut op√©rationnel
    statut = Column(Enum(StatutEquipement), default=StatutEquipement.operationnel, nullable=False, index=True)
    criticite = Column(Enum(CriticiteEquipement), default=CriticiteEquipement.standard, nullable=False, index=True)
    
    # Caract√©ristiques techniques
    description = Column(Text, nullable=True)
    specifications_techniques = Column(Text, nullable=True)
    puissance = Column(Numeric(10, 2), nullable=True)  # en kW
    poids = Column(Numeric(10, 2), nullable=True)  # en kg
    
    # Maintenance et cycles
    frequence_entretien_jours = Column(Integer, nullable=True)  # Cycles en jours
    duree_garantie_mois = Column(Integer, nullable=True)  # Garantie en mois
    cout_acquisition = Column(Integer, nullable=True)  # En centimes d'euro
    
    # M√©tadonn√©es temporelles
    date_acquisition = Column(DateTime, nullable=True)
    date_mise_en_service = Column(DateTime, nullable=True)
    date_fin_garantie = Column(DateTime, nullable=True)
    created_at = Column(DateTime, default=datetime.utcnow, nullable=False, index=True)
    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow, nullable=False)
    
    # Relations m√©tier
    client_id = Column(Integer, ForeignKey("clients.id", ondelete="SET NULL"), nullable=True, index=True)
    contrat_id = Column(Integer, ForeignKey("contrats.id", ondelete="SET NULL"), nullable=True, index=True)

    # üîó Relations ORM optimis√©es
    
    # Relations principales (N:1)
    client: Optional["Client"] = relationship(
        "Client", 
        back_populates="equipements",
        lazy="select"
    )
    
    contrat: Optional["Contrat"] = relationship(
        "Contrat", 
    back_populates="equipements",
        lazy="select"
    )
    
    # Relations de maintenance (1:N) - lazy dynamic pour performances
    interventions = relationship(
        "Intervention", 
        back_populates="equipement", 
        cascade="all, delete-orphan",
        lazy="dynamic",
        order_by="desc(Intervention.date_creation)"
    )
    
    plannings = relationship(
        "Planning", 
        back_populates="equipement", 
        cascade="all, delete-orphan",
        lazy="dynamic",
    order_by="Planning.prochaine_date"
    )

    def __repr__(self) -> str:
        """Repr√©sentation concise pour debugging."""
        return f"<Equipement(id={self.id}, nom='{self.nom}', type='{self.type_equipement}', statut='{self.statut.value}')>"

    # üè∑Ô∏è Propri√©t√©s m√©tier et calculs KPI

    # Compatibilit√©: accepter des kwargs legacy comme 'type' et 'frequence_maintenance'
    def __init__(self, **kwargs):  # type: ignore[override]
        # Mappe JSON 'type' -> attribut ORM 'type_equipement'
        t = kwargs.pop("type", None)
        if t is not None and "type_equipement" not in kwargs:
            kwargs["type_equipement"] = t

        # Supporte diff√©rents alias pour la fr√©quence:
        # - frequence_entretien (API)
        # - frequence_maintenance (tests planning)
        freq = None
        if "frequence_entretien" in kwargs:
            freq = kwargs.pop("frequence_entretien")
        if "frequence_maintenance" in kwargs and freq is None:
            freq = kwargs.pop("frequence_maintenance")

        if freq is not None and "frequence_entretien_jours" not in kwargs:
            # Convertit en nombre de jours si possible
            def _normalize_text(x: str) -> str:
                s = str(x).strip().lower()
                for a, b in (
                    ("√©", "e"), ("√®", "e"), ("√™", "e"), ("√´", "e"),
                    ("√†", "a"), ("√¢", "a"), ("√§", "a"), ("√¥", "o"), ("√∂", "o"),
                    ("√ª", "u"), ("√º", "u"), ("√Æ", "i"), ("√Ø", "i"), ("√ß", "c"),
                ):
                    s = s.replace(a, b)
                return s

            days = None
            try:
                # si "30" -> 30
                days = int(str(freq))
            except Exception:
                label = _normalize_text(str(freq))
                mapping = {
                    "hebdomadaire": 7,
                    "bimensuelle": 15,
                    "mensuelle": 30,
                    "mensuel": 30,
                    "trimestrielle": 90,
                    "semestrielle": 180,
                    "annuelle": 365,
                    "annuel": 365,
                }
                days = mapping.get(label)
            if days is not None:
                kwargs["frequence_entretien_jours"] = days

        # Affectation standard
        for k, v in kwargs.items():
            setattr(self, k, v)

    @property
    def est_operationnel(self) -> bool:
        """V√©rifie si l'√©quipement est op√©rationnel."""
        return self.statut == StatutEquipement.operationnel

    # --- Compatibilit√© champs legacy attendus par sch√©mas/tests ---
    @property
    def type(self) -> str:
        return self.type_equipement

    @property
    def frequence_entretien(self) -> Optional[str]:
        return str(self.frequence_entretien_jours) if self.frequence_entretien_jours is not None else None

    @property
    def est_en_panne(self) -> bool:
        """V√©rifie si l'√©quipement est en panne."""
        return self.statut == StatutEquipement.panne

    @property
    def est_en_maintenance(self) -> bool:
        """V√©rifie si l'√©quipement est en maintenance."""
        return self.statut == StatutEquipement.maintenance

    @property
    def est_critique(self) -> bool:
        """V√©rifie si l'√©quipement est critique pour la production."""
        return self.criticite == CriticiteEquipement.critique

    @property
    def est_sous_garantie(self) -> bool:
        """V√©rifie si l'√©quipement est encore sous garantie."""
        if not self.date_fin_garantie:
            return False
        return datetime.utcnow() < self.date_fin_garantie

    @property
    def age_en_jours(self) -> Optional[int]:
        """Calcule l'√¢ge de l'√©quipement en jours depuis mise en service."""
        if not self.date_mise_en_service:
            return None
        delta = datetime.utcnow() - self.date_mise_en_service
        return delta.days

    @property
    def age_en_annees(self) -> Optional[float]:
        """Calcule l'√¢ge de l'√©quipement en ann√©es."""
        if not self.age_en_jours:
            return None
        return round(self.age_en_jours / 365.25, 1)

    @property
    def prochaine_maintenance_calculee(self) -> Optional[datetime]:
        """Calcule la date de prochaine maintenance pr√©ventive."""
        if not self.frequence_entretien_jours:
            return None
            
        # R√©cup√®re la derni√®re intervention pr√©ventive
        derniere_preventive = self.interventions.filter_by(
            type_intervention="preventive"
        ).first()
        
        if derniere_preventive and derniere_preventive.date_cloture:
            base_date = derniere_preventive.date_cloture
        elif self.date_mise_en_service:
            base_date = self.date_mise_en_service
        else:
            base_date = self.created_at
            
        return base_date + timedelta(days=self.frequence_entretien_jours)

    @property
    def maintenance_en_retard(self) -> bool:
        """V√©rifie si la maintenance pr√©ventive est en retard."""
        prochaine = self.prochaine_maintenance_calculee
        if not prochaine:
            return False
        return datetime.utcnow() > prochaine

    @property
    def nb_interventions_total(self) -> int:
        """Nombre total d'interventions sur cet √©quipement."""
        return self.interventions.count()

    @property
    def nb_interventions_correctives(self) -> int:
        """Nombre d'interventions correctives."""
        return self.interventions.filter_by(type_intervention="corrective").count()

    @property
    def nb_interventions_preventives(self) -> int:
        """Nombre d'interventions pr√©ventives."""
        return self.interventions.filter_by(type_intervention="preventive").count()

    @property
    def taux_pannes_annuel(self) -> Optional[float]:
        """Calcule le taux de pannes par an (interventions correctives/√¢ge)."""
        if not self.age_en_annees or self.age_en_annees == 0:
            return None
        return round(self.nb_interventions_correctives / self.age_en_annees, 2)

    @property
    def cout_maintenance_total(self) -> float:
        """Calcule le co√ªt total des maintenances r√©alis√©es."""
        total = 0.0
        for intervention in self.interventions:
            if intervention.cout_reel:
                total += float(intervention.cout_reel) / 100  # Conversion centimes -> euros
        return round(total, 2)

    @property
    def derniere_intervention(self) -> Optional["Intervention"]:
        """Retourne la derni√®re intervention effectu√©e."""
        return self.interventions.first()

    @property
    def derniere_intervention_date(self) -> Optional[datetime]:
        """Date de la derni√®re intervention."""
        derniere = self.derniere_intervention
        return derniere.date_cloture or derniere.date_creation if derniere else None

    @property
    def temps_depuis_derniere_intervention(self) -> Optional[timedelta]:
        """Temps √©coul√© depuis la derni√®re intervention."""
        if not self.derniere_intervention_date:
            return None
        return datetime.utcnow() - self.derniere_intervention_date

    @property
    def niveau_criticite_numerique(self) -> int:
        """Convertit la criticit√© en valeur num√©rique pour tri/calculs."""
        mapping = {
            CriticiteEquipement.critique: 4,
            CriticiteEquipement.important: 3,
            CriticiteEquipement.standard: 2,
            CriticiteEquipement.non_critique: 1
        }
        return mapping.get(self.criticite, 0)

    @property
    def identificateur_complet(self) -> str:
        """Retourne l'identificateur complet le plus appropri√©."""
        if self.numero_serie:
            return f"{self.nom} (S/N: {self.numero_serie})"
        elif self.code_interne:
            return f"{self.nom} ({self.code_interne})"
        else:
            return self.nom

    @property
    def localisation_complete(self) -> str:
        """Retourne la localisation compl√®te format√©e."""
        parts = [self.localisation]
        if self.batiment:
            parts.append(f"B√¢t. {self.batiment}")
        if self.etage:
            parts.append(f"√âtage {self.etage}")
        if self.zone:
            parts.append(f"Zone {self.zone}")
        return " - ".join(parts)

    # üîß M√©thodes m√©tier pour gestion √©quipement

    def mettre_en_panne(self, raison: str = None) -> None:
        """Passe l'√©quipement en statut panne."""
        self.statut = StatutEquipement.panne
        self.updated_at = datetime.utcnow()

    def mettre_en_maintenance(self) -> None:
        """Passe l'√©quipement en statut maintenance."""
        self.statut = StatutEquipement.maintenance
        self.updated_at = datetime.utcnow()

    def remettre_en_service(self) -> None:
        """Remet l'√©quipement en service op√©rationnel."""
        self.statut = StatutEquipement.operationnel
        self.updated_at = datetime.utcnow()

    def retirer_du_service(self) -> None:
        """Retire d√©finitivement l'√©quipement du service."""
        self.statut = StatutEquipement.retire
        self.updated_at = datetime.utcnow()

    def calculer_date_fin_garantie(self) -> None:
        """Calcule et met √† jour la date de fin de garantie."""
        if self.date_acquisition and self.duree_garantie_mois:
            self.date_fin_garantie = self.date_acquisition + timedelta(
                days=self.duree_garantie_mois * 30.44  # Moyenne jours/mois
            )

    def programmer_maintenance_preventive(self) -> Optional[datetime]:
        """
        Retourne la date recommand√©e pour programmer la prochaine maintenance.
        
        Returns:
            datetime: Date recommand√©e ou None si pas de cycle d√©fini
        """
        if not self.frequence_entretien_jours:
            return None
            
        prochaine = self.prochaine_maintenance_calculee
        if not prochaine:
            return None
            
        # Ajouter une marge de s√©curit√© pour les √©quipements critiques
        if self.est_critique:
            prochaine -= timedelta(days=7)  # 1 semaine d'avance
            
        return prochaine

    def get_historique_pannes(self) -> List["Intervention"]:
        """Retourne l'historique des pannes (interventions correctives)."""
        return list(self.interventions.filter_by(type_intervention="corrective").all())

    def get_planning_maintenance(self) -> List["Planning"]:
        """Retourne les maintenances planifi√©es √† venir."""
        return list(self.plannings.filter(
            Planning.date_prevue >= datetime.utcnow()
        ).all())

    def peut_etre_supprime(self) -> bool:
        """V√©rifie si l'√©quipement peut √™tre supprim√© du syst√®me."""
        # Ne peut pas supprimer s'il y a des interventions en cours
        interventions_actives = self.interventions.filter(
            Intervention.statut.in_(["ouverte", "affectee", "en_cours"])
        ).count()
        
        return interventions_actives == 0 and self.statut == StatutEquipement.retire

    def to_dict(self, include_sensitive: bool = False, include_relations: bool = False) -> Dict[str, Any]:
        """
        S√©rialisation harmonis√©e en dictionnaire.
        
        Args:
            include_sensitive: Inclut donn√©es sensibles/co√ªts (admin/responsable)
            include_relations: Inclut les donn√©es des relations li√©es
            
        Returns:
            Dict contenant les donn√©es s√©rialis√©es
            
        NOTE: Interface standardis√©e pour tous les mod√®les ERP
        """
        # Donn√©es de base (toujours incluses)
        data = {
            "id": self.id,
            "nom": self.nom,
            "numero_serie": self.numero_serie,
            "code_interne": self.code_interne,
            "type_equipement": self.type_equipement,
            "marque": self.marque,
            "modele": self.modele,
            "localisation": self.localisation,
            "localisation_complete": self.localisation_complete,
            "statut": self.statut.value,
            "criticite": self.criticite.value,
            "description": self.description,
            "created_at": self.created_at.isoformat() if self.created_at else None,
            
            # Propri√©t√©s calcul√©es utiles
            "identificateur_complet": self.identificateur_complet,
            "est_operationnel": self.est_operationnel,
            "est_en_panne": self.est_en_panne,
            "est_critique": self.est_critique,
            "est_sous_garantie": self.est_sous_garantie,
            "age_en_jours": self.age_en_jours,
            "age_en_annees": self.age_en_annees,
            "maintenance_en_retard": self.maintenance_en_retard,
            "nb_interventions_total": self.nb_interventions_total,
            "derniere_intervention_date": self.derniere_intervention_date.isoformat() if self.derniere_intervention_date else None,
        }
        
        # Donn√©es sensibles (co√ªts, d√©tails techniques)
        if include_sensitive:
            data.update({
                "updated_at": self.updated_at.isoformat() if self.updated_at else None,
                "specifications_techniques": self.specifications_techniques,
                "puissance": float(self.puissance) if self.puissance else None,
                "poids": float(self.poids) if self.poids else None,
                "cout_acquisition": float(self.cout_acquisition) / 100 if self.cout_acquisition else None,
                "date_acquisition": self.date_acquisition.isoformat() if self.date_acquisition else None,
                "date_mise_en_service": self.date_mise_en_service.isoformat() if self.date_mise_en_service else None,
                "date_fin_garantie": self.date_fin_garantie.isoformat() if self.date_fin_garantie else None,
                "frequence_entretien_jours": self.frequence_entretien_jours,
                "duree_garantie_mois": self.duree_garantie_mois,
                
                # KPI de maintenance
                "prochaine_maintenance_calculee": self.prochaine_maintenance_calculee.isoformat() if self.prochaine_maintenance_calculee else None,
                "nb_interventions_correctives": self.nb_interventions_correctives,
                "nb_interventions_preventives": self.nb_interventions_preventives,
                "taux_pannes_annuel": self.taux_pannes_annuel,
                "cout_maintenance_total": self.cout_maintenance_total,
                "niveau_criticite_numerique": self.niveau_criticite_numerique,
            })
        
        # Relations d√©taill√©es (pour vues compl√®tes)
        if include_relations:
            data.update({
                "client": self.client.to_dict() if self.client else None,
                "contrat": self.contrat.to_dict() if self.contrat else None,
                "client_id": self.client_id,
                "contrat_id": self.contrat_id,
                
                # Historique r√©cent
                "derniere_intervention": self.derniere_intervention.to_dict() if self.derniere_intervention else None,
                "planning_maintenance": [p.to_dict() for p in self.get_planning_maintenance()[:5]],  # 5 prochaines
                
                # M√©tadonn√©es syst√®me
                "peut_etre_supprime": self.peut_etre_supprime(),
                "batiment": self.batiment,
                "etage": self.etage,
                "zone": self.zone,
            })
            
        return data
