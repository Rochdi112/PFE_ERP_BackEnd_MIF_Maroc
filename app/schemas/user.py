# app/schemas/user.py

from pydantic import BaseModel, EmailStr, ConfigDict
from enum import Enum
from typing import Optional
from datetime import datetime

# ===============================
# üéØ ENUM des r√¥les utilisateur
# ===============================
class UserRole(str, Enum):
    """
    R√¥les disponibles dans l‚ÄôERP :
    - admin : contr√¥le total
    - responsable : supervise les interventions
    - technicien : effectue les interventions
    - client : consultation uniquement
    """
    admin = "admin"
    responsable = "responsable"
    technicien = "technicien"
    client = "client"

# ================================
# üë§ Sch√©ma de base utilisateur
# ================================
class UserBase(BaseModel):
    """
    Champs partag√©s entre cr√©ation, affichage et mise √† jour :
    - username : identifiant unique
    - full_name : nom complet
    - email : adresse email unique
    - role : r√¥le de l'utilisateur
    """
    username: str
    full_name: str
    email: EmailStr
    role: UserRole

# =======================================
# üì• Sch√©ma de cr√©ation (input POST)
# =======================================
class UserCreate(UserBase):
    """
    Donn√©es n√©cessaires pour cr√©er un nouvel utilisateur :
    - h√©rite de UserBase
    - ajoute : password (en clair, √† hasher)
    """
    password: str

# =======================================
# üì§ Sch√©ma de sortie (output GET)
# =======================================
class UserOut(UserBase):
    """
    Donn√©es renvoy√©es par l'API :
    - toutes les infos utilisateur sauf le mot de passe
    - audit : id, statut, timestamps
    """
    id: int
    is_active: bool
    created_at: Optional[datetime] = None
    updated_at: Optional[datetime] = None

    model_config = ConfigDict(from_attributes=True)  # Active l'ORM mode pour SQLAlchemy

# =======================================
# üîÅ Sch√©ma de mise √† jour utilisateur
# =======================================
class UserUpdate(BaseModel):
    """
    Champs modifiables par l'utilisateur :
    - nom complet
    - mot de passe
    """
    full_name: Optional[str] = None
    password: Optional[str] = None

# =======================================
# üîê Sch√©mas pour l'authentification
# =======================================
class TokenRequest(BaseModel):
    """
    Donn√©es attendues lors de la connexion :
    - email
    - mot de passe
    """
    email: EmailStr
    password: str

class TokenResponse(BaseModel):
    """
    R√©ponse retourn√©e apr√®s login :
    - access_token : JWT sign√©
    - token_type : 'bearer'
    """
    access_token: str
    token_type: str = "bearer"
